/// <reference types="svelte" />
import { SvelteComponentTyped } from "svelte";

export type SnackbarPositions = typeof import("./snackbar-positions").default;

export interface SnackbarContainerProps {
  /**
   * The position of the snackbar stack inside the container.
   */
  position?: SnackbarPositions[keyof SnackbarPositions];

  /**
   * Show the snackbar with the given options
   * @default () => { const { component = Snackbar, props = {}, duration = 4000 } = options; const key = { component, props }; const originalCloseCallback = props.closeCallback; key.props.closeCallback = function close() { clearTimeout(key.timeoutID); removeSnackbar(key, true); if (typeof originalCloseCallback === 'function') { originalCloseCallback(); } }; key.timeoutID = setTimeout(removeSnackbar, duration, key, false); registeredSnackbars.add(key); registeredSnackbars = registeredSnackbars; return { close: key.props.closeCallback, expired: new Promise(resolve => (key.resolveExpiredPromise = resolve)), }; }
   */
  showSnackbar?: () => any;
}

export default class SnackbarContainer extends SvelteComponentTyped<
  SnackbarContainerProps,
  {},
  {
    default: {
      showSnackbar: <Props extends Record<string, any>>(options: {
        component: import("svelte").SvelteComponentTyped<Props>;
        props: Props;
        duration: number;
      }) => {
        close: () => void;
        expired: Promise<boolean>;
      };
    };
  }
> {}
